package com.cloudbees.jenkins.support.actions;

import com.cloudbees.jenkins.support.SupportAction;
import com.cloudbees.jenkins.support.api.SupportContentContributor;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
import org.apache.commons.io.FileUtils;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.interceptor.RequirePOST;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * Support Action to Manage content generated by Support extensions.
 */
@Restricted(NoExternalUse.class)
public class SupportGeneratedContentAction extends SupportChildAction {

    private static final Logger LOGGER = Logger.getLogger(SupportGeneratedContentAction.class.getName());

    static final String URL = "generatedContent";

    public SupportGeneratedContentAction(@NonNull SupportAction supportAction) {
        super(supportAction);
    }

    @Override
    public String getIconFileName() {
        return "/plugin/support-core/images/support.svg";
    }

    @Override
    public String getDisplayName() {
        return Messages.SupportGeneratedContentAction_DisplayName();
    }

    @Override
    public String getUrlName() {
        return URL;
    }

    public List<SupportContentContributor> getContentContributors() {
        return Jenkins.get().getExtensionList(SupportContentContributor.class);
    }

    @CheckForNull
    public SupportContentContributor getContentContributor(String id) {
        return getContentContributors().stream()
            .filter(contentGenerator -> contentGenerator.getContributorId().equals(id))
            .findFirst().orElse(null);
    }

    @RequirePOST
    @SuppressWarnings("unused") // Used by Stapler
    public void doDeleteFiles(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {

        Jenkins.get().checkPermission(Jenkins.ADMINISTER);

        JSONObject json = req.getSubmittedForm();
        if (!json.has("contentContributorId")) {
            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }

        String componentKey = json.getString("contentContributorId");
        SupportContentContributor supportContentContributor = getContentContributor(componentKey);
        if (supportContentContributor == null) {
            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Unknown support content type: " + componentKey);
            return;
        }

        List<File> filesToDelete = getSelectedFiles(req.bindJSONToList(SupportAction.Selection.class, json.get("files")), supportContentContributor);
        for (File fileToDelete : filesToDelete) {
            LOGGER.fine("Trying to delete file " + fileToDelete.getAbsolutePath());
            try {
                if (fileToDelete.delete()) {
                    LOGGER.info("File " + fileToDelete.getAbsolutePath() + " successfully deleted.");
                } else {
                    LOGGER.log(Level.SEVERE, "Unable to delete file " + fileToDelete.getAbsolutePath());
                }
            } catch (RuntimeException e) {
                LOGGER.log(Level.SEVERE, "Unable to delete file " + fileToDelete.getAbsolutePath(), e);
            }
        }

        rsp.sendRedirect(".");
    }

    @RequirePOST
    @SuppressWarnings("unused") // Used by Stapler
    public void doDownloadFiles(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {

        Jenkins.get().checkPermission(Jenkins.ADMINISTER);

        JSONObject json = req.getSubmittedForm();
        if (!json.has("contentContributorId")) {
            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }

        String componentKey = json.getString("contentContributorId");
        SupportContentContributor supportContentContributor = getContentContributor(componentKey);
        if (supportContentContributor == null) {
            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Unknown support content type: " + componentKey);
            return;
        }

        List<File> filesToDownload = getSelectedFiles(req.bindJSONToList(SupportAction.Selection.class, json.get("files")), supportContentContributor);
        File fileToDownload;
        if (filesToDownload.size() == 0) {
            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, "No file selected");
            return;
        } else if (filesToDownload.size() == 1) {
            fileToDownload = filesToDownload.iterator().next();
        } else {
            // more than one file were selected, create a zip file
            fileToDownload = createZipFile(filesToDownload);
        }
        LOGGER.fine("Trying to download file " + fileToDownload.getAbsolutePath());
        try {
            rsp.setContentType("application/zip");
            rsp.addHeader("Content-Disposition", "inline; filename=" + fileToDownload.getName() + ";");
            FileUtils.copyFile(fileToDownload, rsp.getOutputStream());
            LOGGER.info("File " + fileToDownload.getAbsolutePath() + " successfully downloaded");
        } catch (RuntimeException e) {
            LOGGER.log(Level.SEVERE, "Unable to download file " + fileToDownload.getAbsolutePath(), e);
        } finally {
            if (filesToDownload.size() > 1) {
                if (fileToDownload.delete()) {
                    LOGGER.log(Level.FINE, "Temporary multi bundle deleted: " + fileToDownload.getAbsolutePath());
                } else {
                    LOGGER.log(Level.SEVERE, "Unable to delete temporary multi bundle archive: " + fileToDownload.getAbsolutePath());
                }
            }
        }
    }

    private List<File> getSelectedFiles(List<SupportAction.Selection> selections, SupportContentContributor supportContentContributor) {
        List<File> files = new ArrayList<>();
        List<File> existingFiles = supportContentContributor.getFiles();
        for (SupportAction.Selection s : selections) {
            if (s.isSelected()) {
                if (existingFiles.stream().anyMatch(file -> file.getName().equals(s.getName()))) {
                    files.add(Paths.get(supportContentContributor.getDirPath().getAbsolutePath(), s.getName()).toFile());
                } else {
                    LOGGER.log(Level.FINE, "The file selected {0} does not exist, so it will not be processed", s.getName());
                }
            }
        }
        return files;
    }

    private File createZipFile(List<File> files) throws IOException {
        File zipFile = File.createTempFile(
            String.format("multi(%s)-", files.size()), ".zip");
        zipFile.deleteOnExit();
        try (FileOutputStream fos = new FileOutputStream(zipFile);
             ZipOutputStream zos = new ZipOutputStream(fos)) {
            byte[] buffer = new byte[1024];
            for (File file : files) {
                try (FileInputStream fis = new FileInputStream(file)) {
                    zos.putNextEntry(new ZipEntry(file.getName()));
                    int length;
                    while ((length = fis.read(buffer)) > 0) {
                        zos.write(buffer, 0, length);
                    }
                }
            }
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, "Error creating zip file: " + zipFile.getAbsolutePath(), e);
        }
        return zipFile;
    }
}
